#!/usr/bin/env node

/*!
 * Rammer JavaScript Library v0.0.20
 * https://github.com/trysd/npm-rammer#readme
 * Released under the MIT license
 *
 * Date: 2023-01-13T10:33Z
 */
'use strict';

var fs = require('fs-extra');
var uuid = require('uuid');
var readline = require('readline');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n["default"] = e;
    return Object.freeze(n);
}

var fs__namespace = /*#__PURE__*/_interopNamespace(fs);
var readline__default = /*#__PURE__*/_interopDefaultLegacy(readline);

function __spreadArray(to, from, pack) {
  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    if (ar || !(i in from)) {
      if (!ar) ar = Array.prototype.slice.call(from, 0, i);
      ar[i] = from[i];
    }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
}

var MFile = /** @class */ (function () {
    function MFile() {
    }
    /**
     * Get recursive directory structure
     * @param dirPath
     * @param res
     * @param route
     * @returns
     */
    MFile.readDir = function (dirPath, res, route) {
        var _this = this;
        if (res === void 0) { res = []; }
        if (route === void 0) { route = []; }
        var routesStr = (route.length ? route.join('/') + '/' : '');
        var dirent = fs__namespace.readdirSync(dirPath + '/' + routesStr, { withFileTypes: true });
        dirent.forEach(function (d) {
            if (d.isDirectory()) {
                _this.readDir(dirPath, res, __spreadArray(__spreadArray([], route, true), [d.name], false));
            }
            else {
                res.push(routesStr + d.name);
            }
        });
        return res;
    };
    return MFile;
}());

var base = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
var MBase64 = /** @class */ (function () {
    function MBase64() {
    }
    MBase64.btoa = function (str) {
        return Array.from(new TextEncoder().encode(str))
            .map(function (x) { return x.toString(2).padStart(8, "0"); })
            .join("")
            .padEnd(Math.ceil(str.length * 8 / 6) * 6, "0")
            .split(/(.{6})/)
            .filter(function (x) { return x; })
            .map(function (x) { return base[parseInt(x, 2)]; })
            .join("");
    };
    MBase64.atob = function (e) {
        var t = e.replace(/=/g, "").split(""), res = new Uint8Array(6 * t.length / 8), connect = 0, unit = 0;
        return t.forEach(function (e, t) {
            var x = base.indexOf(e), mod = t % 4;
            if (0 === mod) {
                connect = x << 2;
                return;
            }
            var f = 6 - 2 * mod;
            connect += x >>> f,
                res[unit] = connect,
                unit++,
                connect = (x << 8 - f) % 256;
        }), res;
    };
    return MBase64;
}());

var CommandLine = /** @class */ (function () {
    function CommandLine(commandLine) {
        this.commandLine = [];
        this.commandLine = commandLine;
    }
    CommandLine.prototype.main = function () {
        var options = this.commandLine.map(function (m) { return m.match(/^-/) ? m : null; }).filter(function (f) { return f != null; });
        var targets = this.commandLine.filter(function (f) { return !f.match(/^-/); }).slice(2, 4);
        if (options.includes('--decode')) {
            this.unrammer(targets);
        }
        else {
            this.rammer(options, targets);
        }
    };
    CommandLine.prototype.unrammer = function (targets) {
        var readRammerFile = targets[0];
        var writeBaseDir = targets[1];
        var active = false;
        var td = new TextDecoder();
        readline__default["default"].createInterface({ input: fs__namespace.createReadStream(readRammerFile) }).on('line', function (li) {
            if (!active && li === 'format=txt') {
                active = true;
            }
            else if (active) {
                var fb = li.split(':');
                var fileName = td.decode(MBase64.atob(fb[0]));
                var body = td.decode(MBase64.atob(fb[1]));
                fs__namespace.outputFileSync('./' + writeBaseDir + '/' + fileName, body);
                console.log("".concat(writeBaseDir + '/' + fileName));
            }
        });
        console.log('done.');
    };
    CommandLine.prototype.rammer = function (options, targets) {
        var readDir = targets[0];
        var tempFile = './~tmp.' + uuid.v4();
        var writeFile = targets[1];
        fs__namespace.removeSync(writeFile);
        var fileList = MFile.readDir(readDir, [], []);
        //
        // header
        //
        var header = function () {
            if (options.includes('--type-js')) {
                fs__namespace.appendFileSync(tempFile, 'var file = {};\n');
            }
            else if (options.includes('--type-ts')) {
                fs__namespace.appendFileSync(tempFile, 'const _files: { [key in IFiles]: string } = {\n');
            }
            else {
                fs__namespace.appendFileSync(tempFile, 'format=txt\n');
            }
        };
        header();
        //
        // body
        //
        fileList.forEach(function (f, i) {
            var _a;
            var targetFile = targets[0]
                + (!((_a = targets[0]) === null || _a === void 0 ? void 0 : _a.match(/\/$/)) ? '/' : '')
                + f;
            console.log("execute(".concat(fileList.length, "/").concat(i + 1, "): ").concat(targetFile));
            var mStr = fs__namespace.readFileSync(targetFile).toString();
            if (options.includes('--type-js')) {
                fs__namespace.appendFileSync(tempFile, "files[\"".concat(f, "\"] = \"").concat(MBase64.btoa(mStr), "\";\n"));
            }
            else if (options.includes('--type-ts')) {
                fs__namespace.appendFileSync(tempFile, "  \"".concat(f, "\": \"").concat(MBase64.btoa(mStr), "\"").concat(fileList.length - 1 == i ? '' : ',', "\n"));
            }
            else {
                fs__namespace.appendFileSync(tempFile, "".concat(MBase64.btoa(f), ":").concat(MBase64.btoa(mStr), "\n"));
            }
        });
        //
        // footer
        //
        var footer = function () {
            if (options.includes('--type-js')) {
                fs__namespace.appendFileSync(tempFile, 'module.exports = file;');
            }
            else if (options.includes('--type-ts')) {
                var c = (targets[1] + '')
                    .replace(/^.*?([^\/]+)$/, '$1')
                    .replace(/^(.+?)\.[^\.]+?$/, '$1')
                    .replace(/-[a-z0-9]/, function (a) { return a.replace(/-/, '').toUpperCase(); })
                    .replace(/^[a-z]/, function (a) { return a.toUpperCase(); });
                fs__namespace.appendFileSync(tempFile, "};\n\nexport type IFiles = \n".concat(fileList.map(function (m) { return "  \"".concat(m, "\""); }).join(' |\n'), ";\n\nexport class ").concat(c, " {\n  public static get(fileName: IFiles): string {\n    return new TextDecoder().decode(").concat(c, ".decodeBase64(_files[fileName]));\n  }\n  public static getFileNameList(): string[] {\n    return Object.keys(_files);\n  }\n  public static getFiles() {\n    return _files;\n  }\n  public static decodeBase64(e: string): Uint8Array {\n    let t = e.replace(/=/g, \"\").split(\"\"), l = new Uint8Array(6 * t.length / 8), n = 0, r = 0;\n    return t.forEach((e, t) => { let x = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\".indexOf(e), c = t % 4; if (0 === c) { n = x << 2; return } let f = 6 - 2 * c; n += x >>> f, l[r] = n, r++, n = (x << 8 - f) % 256 }), l\n  }\n}"));
            }
        };
        footer();
        fs__namespace.copyFileSync(tempFile, writeFile);
        // fs.renameSync(tempFile, writeFile);
        console.log('done.');
        var size = fs__namespace.statSync(tempFile).size;
        if (size < 1024) {
            console.log('total size:', fs__namespace.statSync(tempFile).size, 'B');
        }
        else if (size < 1024 * 1024) {
            console.log('total size:', (fs__namespace.statSync(tempFile).size / 1024).toFixed(3), 'KB');
        }
        else {
            console.log('total size:', (fs__namespace.statSync(tempFile).size / 1024 / 1024).toFixed(3), 'MB');
        }
        console.log("".concat(fileList.length, " files into \"").concat(writeFile, "\" were rammed."));
        fs__namespace.removeSync(tempFile);
    };
    return CommandLine;
}());

new CommandLine(process.argv).main();

module.exports = CommandLine;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
